# Generated by Django 4.2.16 on 2024-10-11 20:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(help_text='Year published online', null=True, validators=[django.core.validators.MinValueValidator(1850), django.core.validators.MaxValueValidator(2025)])),
                ('month', models.PositiveIntegerField(blank=True, help_text='Month published online', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('day', models.PositiveIntegerField(blank=True, help_text='Day published online', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('title', models.CharField(max_length=300, unique=True)),
                ('journal', models.CharField(blank=True, max_length=100)),
                ('doi', models.URLField(blank=True, max_length=100, null=True, unique=True)),
                ('abstract', models.TextField(blank=True, max_length=2000)),
                ('approved', models.BooleanField(default=False, verbose_name='Approved')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('family', models.CharField(max_length=100, null=True)),
                ('affiliation', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'unique_together': {('name', 'family')},
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment', models.CharField(blank=True, max_length=50)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.article')),
            ],
            options={
                'verbose_name_plural': 'Materials',
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(help_text='Year published online', null=True, validators=[django.core.validators.MinValueValidator(1850), django.core.validators.MaxValueValidator(2025)])),
                ('month', models.PositiveIntegerField(blank=True, help_text='Month published online', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('day', models.PositiveIntegerField(blank=True, help_text='Day published online', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('title', models.CharField(max_length=300, unique=True)),
                ('journal', models.CharField(blank=True, max_length=100)),
                ('doi', models.URLField(blank=True, max_length=100, null=True, unique=True)),
                ('abstract', models.TextField(blank=True, max_length=2000)),
                ('approved', models.BooleanField(default=False, verbose_name='Approved')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('alternative_names', models.TextField(blank=True, help_text='Comma-separated common names or synonyms')),
                ('phylum', models.CharField(blank=True, choices=[('Basidiomycota', 'Basidiomycota'), ('Ascomycota', 'Ascomycota'), ('Blastocladiomycota', 'Blastocladiomycota'), ('Mycoromycota', 'Mycoromycota'), ('Opisthosporidia', 'Opisthosporidia')], max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Species',
            },
        ),
        migrations.CreateModel(
            name='Substrate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Substrate/Medium')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='Symbol of the unit (e.g. g/cmÂ³)', max_length=10, unique=True)),
                ('name', models.CharField(blank=True, help_text='Full name of the unit (e.g. grams per cubic centimeter)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewAuthorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.CharField(blank=True, choices=[('first', 'first'), ('additional', 'additional')], max_length=20)),
                ('affiliation', models.CharField(blank=True, max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.author')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.review')),
            ],
            options={
                'unique_together': {('author', 'review', 'sequence')},
            },
        ),
        migrations.AddField(
            model_name='review',
            name='authors',
            field=models.ManyToManyField(through='fungalmaterials.ReviewAuthorship', to='fungalmaterials.author', verbose_name='Author(s)'),
        ),
        migrations.AddField(
            model_name='review',
            name='topic',
            field=models.ManyToManyField(blank=True, to='fungalmaterials.topic'),
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(help_text='Measured value of the property')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.material')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.unit')),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.AddField(
            model_name='material',
            name='method',
            field=models.ManyToManyField(blank=True, to='fungalmaterials.method'),
        ),
        migrations.AddField(
            model_name='material',
            name='species',
            field=models.ManyToManyField(blank=True, to='fungalmaterials.species'),
        ),
        migrations.AddField(
            model_name='material',
            name='substrates',
            field=models.ManyToManyField(blank=True, to='fungalmaterials.substrate', verbose_name='Substrate/Medium'),
        ),
        migrations.CreateModel(
            name='ArticleAuthorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.CharField(blank=True, choices=[('first', 'first'), ('additional', 'additional')], max_length=20)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.article')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fungalmaterials.author')),
            ],
            options={
                'unique_together': {('author', 'article', 'sequence')},
            },
        ),
        migrations.AddField(
            model_name='article',
            name='authors',
            field=models.ManyToManyField(through='fungalmaterials.ArticleAuthorship', to='fungalmaterials.author', verbose_name='Author(s)'),
        ),
        migrations.AddField(
            model_name='article',
            name='topic',
            field=models.ManyToManyField(blank=True, to='fungalmaterials.topic'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('title', 'doi')},
        ),
        migrations.AlterUniqueTogether(
            name='material',
            unique_together={('article', 'treatment')},
        ),
        migrations.AlterUniqueTogether(
            name='article',
            unique_together={('title', 'doi')},
        ),
    ]
